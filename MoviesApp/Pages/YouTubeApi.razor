@page "/youtubeapi"

@inject HttpClient Http
@inject IToastService toastService
@using AppModels
@using System.Text.Json
@using System.Text.Json.Serialization;

<PageTitle>YouTube API</PageTitle>

<h1>YouTube API</h1>

<table>
    <tr>
        <td><input type="search" @bind="movieNameShow" /></td>
        <td><button class="btn btn-primary" @onclick="SearchMovie">Search</button></td>
        <td><div class="loader" hidden=@spinner_hidden></div></td>
    </tr>
</table>

@if(movieList.items != null)
{
    <table class="table table-bordered table-striped mb-0">
        <tr>
            <th></th>
            <th>Title</th>
            <th>Movie ID</th>
        </tr>
        @foreach (var movie in movieList.items)
        {
            <tr>
                <td><img height="125" width="75" src="@movie.snippet.thumbnails.high.url"/></td>
                <td>@movie.snippet.title</td>
                <td>@movie.id.videoId</td>
            </tr>
        }
    </table>
}



@code {
    public YoutubeTrailerResponse movieList { get; set; } = new YoutubeTrailerResponse();

    private ToastLevel toastLevel;
    private string toastMessage;
    private string movieNameShow;
    private string movieId;
    private string videoUrl = "";
    private bool showVideo = true;
    private bool spinner_hidden = true;

    private async Task SearchMovie()
    {
        if (movieNameShow.Trim() == "")
        {
            toastService.ShowToast(ToastLevel.Error, "You must enter a movie name!");
        }
        else
        {
            spinner_hidden = false;
            movieList = await Http.GetFromJsonAsync<YoutubeTrailerResponse>("YoutubeApi/Trailer/" + movieNameShow);
            spinner_hidden = true;

            if (movieList.etag != "")
                toastService.ShowToast(ToastLevel.Success, "Trailer requested!");
            else
                toastService.ShowToast(ToastLevel.Error, "Error while requesting trailer!");
        }

    }

    protected override async Task OnInitializedAsync()
    {
    }
}

